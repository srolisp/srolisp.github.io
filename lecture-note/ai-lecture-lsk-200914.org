#+title: Anaconda & pandas basic
#+subtitle: 5 weeks by lsk 
#+date: <2020-09-14 Mon 18:00>
#+tags: python, bash, elisp, lisp, zoom
#+author: srolisp

* COMMENT 이시경01029981654 yisikyong@naver.com

* basic skillup
:PROPERTIES:
:header-args:bash: :results verbatim
:header-args:elisp: :exports both
:header-args:ipython: :session mglearn200914 :tangle "mglearn200914.py" :results drawer :exports both
:END:
#+begin_src ipython
  import pandas as pd
  import numpy as np

  s=pd.Series([1,3,5,np.nan, 6,8])
  s
#+end_src

#+RESULTS:
:results:
# Out[312]:
#+BEGIN_EXAMPLE
  0    1.0
  1    3.0
  2    5.0
  3    NaN
  4    6.0
  5    8.0
  dtype: float64
#+END_EXAMPLE
:end:

#+begin_src ipython
  dates = pd.date_range('20200722', periods=6)
  dates
#+end_src

#+RESULTS:
:results:
# Out[313]:
#+BEGIN_EXAMPLE
  DatetimeIndex(['2020-07-22', '2020-07-23', '2020-07-24', '2020-07-25',
  '2020-07-26', '2020-07-27'],
  dtype='datetime64[ns]', freq='D')
#+END_EXAMPLE
:end:

#+begin_src ipython
df = pd.DataFrame(np.random.randn(6, 4), index=dates, columns=['A', 'B', 'C', 'D'])
df
#+end_src

#+RESULTS:
:results:
# Out[314]:
#+BEGIN_EXAMPLE
  A         B         C         D
  2020-07-22  0.315156 -1.279805 -0.924813  0.593167
  2020-07-23 -0.247626 -0.503743  0.945840  0.428815
  2020-07-24  0.352757  0.671588 -0.545335  2.126547
  2020-07-25 -0.495316  0.241648  1.083792  0.601202
  2020-07-26 -0.317846  0.904000 -0.598515  0.005196
  2020-07-27 -0.937101 -1.343892  0.494248  0.164489
#+END_EXAMPLE
:end:

#+begin_src ipython
df = pd.DataFrame([[1, 2, 3, 4], [2, 3, 4, 5], [3, 4, 5, 6], [7, 55, 4, 2], [3, 5, 6, 2], [2, 3, 4, 4]], index=dates, columns=['A', 'B', 'C', 'D'])
df
#+end_src

#+RESULTS:
:results:
# Out[315]:
#+BEGIN_EXAMPLE
  A   B  C  D
  2020-07-22  1   2  3  4
  2020-07-23  2   3  4  5
  2020-07-24  3   4  5  6
  2020-07-25  7  55  4  2
  2020-07-26  3   5  6  2
  2020-07-27  2   3  4  4
#+END_EXAMPLE
:end:


#+begin_src ipython
df.index
#+end_src

#+RESULTS:
:results:
# Out[316]:
#+BEGIN_EXAMPLE
  DatetimeIndex(['2020-07-22', '2020-07-23', '2020-07-24', '2020-07-25',
  '2020-07-26', '2020-07-27'],
  dtype='datetime64[ns]', freq='D')
#+END_EXAMPLE
:end:

#+begin_src ipython
df.columns
#+end_src

#+RESULTS:
:results:
# Out[208]:
: Index(['A', 'B', 'C', 'D'], dtype='object')
:end:

#+begin_src ipython
df.values
#+end_src

#+RESULTS:
:results:
# Out[209]:
#+BEGIN_EXAMPLE
  array([[ 1,  2,  3,  4],
  [ 2,  3,  4,  5],
  [ 3,  4,  5,  6],
  [ 7, 55,  4,  2],
  [ 3,  5,  6,  2],
  [ 2,  3,  4,  4]])
#+END_EXAMPLE
:end:

#+begin_src ipython
df.info
#+end_src

#+RESULTS:
:results:
# Out[210]:
#+BEGIN_EXAMPLE
  <bound method DataFrame.info of             A   B  C  D
  2020-07-22  1   2  3  4
  2020-07-23  2   3  4  5
  2020-07-24  3   4  5  6
  2020-07-25  7  55  4  2
  2020-07-26  3   5  6  2
  2020-07-27  2   3  4  4>
#+END_EXAMPLE
:end:

#+begin_src ipython :results output
df.info()
#+end_src

#+RESULTS:
:results:
<class 'pandas.core.frame.DataFrame'>
DatetimeIndex: 6 entries, 2020-07-22 to 2020-07-27
Freq: D
Data columns (total 4 columns):
 #   Column  Non-Null Count  Dtype
---  ------  --------------  -----
 0   A       6 non-null      int64
 1   B       6 non-null      int64
 2   C       6 non-null      int64
 3   D       6 non-null      int64
dtypes: int64(4)
memory usage: 400.0 bytes
:end:

#+begin_src ipython
df.describe()
#+end_src

#+RESULTS:
:results:
# Out[213]:
#+BEGIN_EXAMPLE
  A          B         C         D
  count  6.000000   6.000000  6.000000  6.000000
  mean   3.000000  12.000000  4.333333  3.833333
  std    2.097618  21.090282  1.032796  1.602082
  min    1.000000   2.000000  3.000000  2.000000
  25%    2.000000   3.000000  4.000000  2.500000
  50%    2.500000   3.500000  4.000000  4.000000
  75%    3.000000   4.750000  4.750000  4.750000
  max    7.000000  55.000000  6.000000  6.000000
#+END_EXAMPLE
:end:

#+begin_src ipython
df['A']
#+end_src

#+RESULTS:
:results:
# Out[214]:
#+BEGIN_EXAMPLE
  2020-07-22    1
  2020-07-23    2
  2020-07-24    3
  2020-07-25    7
  2020-07-26    3
  2020-07-27    2
  Freq: D, Name: A, dtype: int64
#+END_EXAMPLE
:end:

0에서 3전까지
#+begin_src ipython
df[0:3]
#+end_src

#+RESULTS:
:results:
# Out[215]:
#+BEGIN_EXAMPLE
  A  B  C  D
  2020-07-22  1  2  3  4
  2020-07-23  2  3  4  5
  2020-07-24  3  4  5  6
#+END_EXAMPLE
:end:

#+begin_src ipython
df[2:5]
#+end_src

#+RESULTS:
:results:
# Out[216]:
#+BEGIN_EXAMPLE
  A   B  C  D
  2020-07-24  3   4  5  6
  2020-07-25  7  55  4  2
  2020-07-26  3   5  6  2
#+END_EXAMPLE
:end:
인덱스로 검색할때는 끝부분 포함해서이다
#+begin_src ipython
df['20200723':'20200726']

#+end_src

#+RESULTS:
:results:
# Out[219]:
#+BEGIN_EXAMPLE
  A   B  C  D
  2020-07-23  2   3  4  5
  2020-07-24  3   4  5  6
  2020-07-25  7  55  4  2
  2020-07-26  3   5  6  2
#+END_EXAMPLE
:end:

#+begin_src ipython
dates

#+end_src




#+RESULTS:
:results:
# Out[220]:
#+BEGIN_EXAMPLE
  DatetimeIndex(['2020-07-22', '2020-07-23', '2020-07-24', '2020-07-25',
  '2020-07-26', '2020-07-27'],
  dtype='datetime64[ns]', freq='D')
#+END_EXAMPLE
:end:
TODO:다시 확인하자
#+begin_src ipython
df.loc[dates[0]]
#+end_src

#+RESULTS:
:results:
# Out[221]:
#+BEGIN_EXAMPLE
  A    1
  B    2
  C    3
  D    4
  Name: 2020-07-22 00:00:00, dtype: int64
#+END_EXAMPLE
:end:

#+begin_src ipython
df.loc[:, ['A', 'B']]
#+end_src

#+RESULTS:
:results:
# Out[317]:
#+BEGIN_EXAMPLE
  A   B
  2020-07-22  1   2
  2020-07-23  2   3
  2020-07-24  3   4
  2020-07-25  7  55
  2020-07-26  3   5
  2020-07-27  2   3
#+END_EXAMPLE
:end:

#+begin_src ipython
df.loc[:, ['A', 'B']]
#+end_src

#+RESULTS:
:results:
# Out[225]:
#+BEGIN_EXAMPLE
  A   B
  2020-07-22  1   2
  2020-07-23  2   3
  2020-07-24  3   4
  2020-07-25  7  55
  2020-07-26  3   5
  2020-07-27  2   3
#+END_EXAMPLE
:end:

#+begin_src ipython
df.loc[:, 'A' : 'C']
#+end_src

#+RESULTS:
:results:
# Out[226]:
#+BEGIN_EXAMPLE
  A   B  C
  2020-07-22  1   2  3
  2020-07-23  2   3  4
  2020-07-24  3   4  5
  2020-07-25  7  55  4
  2020-07-26  3   5  6
  2020-07-27  2   3  4
#+END_EXAMPLE
:end:

#+begin_src ipython
df.loc['20200723' : '20200726', 'B' : 'C']
#+end_src

#+RESULTS:
:results:
# Out[321]:
#+BEGIN_EXAMPLE
  B  C
  2020-07-23   3  4
  2020-07-24   4  5
  2020-07-25  55  4
  2020-07-26   5  6
#+END_EXAMPLE
:end:

#+begin_src ipython
  df.iloc[3:5, 0:2]
#+end_src

#+RESULTS:
:results:
# Out[322]:
#+BEGIN_EXAMPLE
  A   B
  2020-07-25  7  55
  2020-07-26  3   5
#+END_EXAMPLE
:end:

#+begin_src ipython
  df.iloc[[1, 2, 4], [0, 2]]
#+end_src

#+RESULTS:
:results:
# Out[277]:
#+BEGIN_EXAMPLE
  A  C
  2020-07-23  2  4
  2020-07-24  3  5
  2020-07-26  3  6
#+END_EXAMPLE
:end:
df.iloc 이게 된다고 생각해보면 밑에 꺼도 자연스레 이해가 되기도..
#+begin_src ipython
df[df['A']>0]
#+end_src

#+RESULTS:
:results:
# Out[330]:
#+BEGIN_EXAMPLE
  A   B  C  D
  2020-07-22  1   2  3  4
  2020-07-23  2   3  4  5
  2020-07-24  3   4  5  6
  2020-07-25  7  55  4  2
  2020-07-26  3   5  6  2
  2020-07-27  2   3  4  4
#+END_EXAMPLE
:end:

#+begin_src ipython
  df[df>0]
#+end_src

#+RESULTS:
:results:
# Out[279]:
#+BEGIN_EXAMPLE
  A   B  C  D
  2020-07-22  1   2  3  4
  2020-07-23  2   3  4  5
  2020-07-24  3   4  5  6
  2020-07-25  7  55  4  2
  2020-07-26  3   5  6  2
  2020-07-27  2   3  4  4
#+END_EXAMPLE
:end:

#+begin_src ipython
  # df2=df.copy() 복사하려면 이렇게..
  df2=pd.DataFrame(np.random.randn(6, 4), index=dates, columns=['A', 'B', 'C', 'D'])
  df2
#+end_src

#+RESULTS:
:results:
# Out[284]:
#+BEGIN_EXAMPLE
  A         B         C         D
  2020-07-22 -0.110651 -2.026646 -1.336949  0.426653
  2020-07-23 -0.312096  1.363030 -0.642003 -1.155308
  2020-07-24 -0.293691 -0.727447 -0.812952  0.366418
  2020-07-25 -0.498190  1.265693 -1.290838 -1.374115
  2020-07-26  0.672036 -0.143654 -0.771234 -0.593618
  2020-07-27  0.836784 -0.785055  0.645853 -0.174489
#+END_EXAMPLE
:end:

#+begin_src ipython
  df2['E'] = ['one', 'two', 'three', 'four', 'five', 'six']
  df2
#+end_src

#+RESULTS:
:results:
# Out[286]:
#+BEGIN_EXAMPLE
  A         B         C         D      E
  2020-07-22 -0.110651 -2.026646 -1.336949  0.426653    one
  2020-07-23 -0.312096  1.363030 -0.642003 -1.155308    two
  2020-07-24 -0.293691 -0.727447 -0.812952  0.366418  three
  2020-07-25 -0.498190  1.265693 -1.290838 -1.374115   four
  2020-07-26  0.672036 -0.143654 -0.771234 -0.593618   five
  2020-07-27  0.836784 -0.785055  0.645853 -0.174489    six
#+END_EXAMPLE
:end:

#+begin_src ipython
  df2['E'].isin(['two', 'four'])
#+end_src

#+RESULTS:
:results:
# Out[290]:
#+BEGIN_EXAMPLE
  2020-07-22    False
  2020-07-23     True
  2020-07-24    False
  2020-07-25     True
  2020-07-26    False
  2020-07-27    False
  Freq: D, Name: E, dtype: bool
#+END_EXAMPLE
:end:
다시 연습해보자
#+begin_src ipython
  df2[df2['E'].isin(['two', 'four'])]
#+end_src

#+RESULTS:
:results:
# Out[292]:
#+BEGIN_EXAMPLE
  A         B         C         D     E
  2020-07-23 -0.312096  1.363030 -0.642003 -1.155308   two
  2020-07-25 -0.498190  1.265693 -1.290838 -1.374115  four
#+END_EXAMPLE
:end:

#+begin_src ipython
  df2
#+end_src

#+RESULTS:
:results:
# Out[295]:
#+BEGIN_EXAMPLE
  A         B         C         D      E
  2020-07-22 -0.110651 -2.026646 -1.336949  0.426653    one
  2020-07-23 -0.312096  1.363030 -0.642003 -1.155308    two
  2020-07-24 -0.293691 -0.727447 -0.812952  0.366418  three
  2020-07-25 -0.498190  1.265693 -1.290838 -1.374115   four
  2020-07-26  0.672036 -0.143654 -0.771234 -0.593618   five
  2020-07-27  0.836784 -0.785055  0.645853 -0.174489    six
#+END_EXAMPLE
:end:



#+begin_src ipython
df2 = df2.iloc[:, :4]
#+end_src

#+RESULTS:
:results:
# Out[310]:
:end:

#+begin_src ipython
  df2.apply(lambda x: x.max() - x.min())
#+end_src

#+RESULTS:
:results:
# Out[311]:
#+BEGIN_EXAMPLE
  A    1.334973
  B    3.389676
  C    1.982803
  D    1.800768
  dtype: float64
#+END_EXAMPLE
:end:

* 서울시의 인구와 cctv 와 범죄율의 상관관계 
:PROPERTIES:
:header-args:bash: :results verbatim
:header-args:elisp: :exports both
:header-args:ipython: :session mglearn200914 :tangle "mglearn200914.py" :results drawer :exports both
:END:
read_excel함수안에 encoding 파라메터 넣으니 에러가 난다.
#+begin_src ipython
  import pandas as pd
  CCTV_Seoul = pd.read_excel('DataScience/data/aaaa.xlsx', thousands=',')
  CCTV_Seoul.head(25)
#+end_src

#+RESULTS:
:results:
# Out[165]:
#+BEGIN_EXAMPLE
  기관명    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년
  0     강 남 구  5221    1944.0  195.0  316.0    430    546    765    577    448
  1     강 동 구  1879     303.0  387.0  134.0     59    144    194    273    385
  2     강 북 구  1265     243.0   88.0  141.0     74    145    254      1    319
  3     강 서 구  1617     219.0  155.0  118.0    230    187    190    264    254
  4     관 악 구  3985     430.0   56.0  419.0    487    609    619    694    671
  5     광 진 구  1581     470.0   42.0   83.0     87     64     21    468    346
  6     구 로 구  3227     852.0  219.0  349.0    187    268    326    540    486
  7     금 천 구  1634      27.0   17.0  242.0    101    382    136    199    530
  8     노 원 구  1906     481.0  117.0  203.0     80    461    298    110    156
  9     도 봉 구   858     197.0   66.0    8.0    185     59    155    117     71
  10     동대문구  2003       NaN    NaN    NaN   1326    111    233    136    197
  11    동 작 구  1780     238.0   93.0   29.0    503    130    254    278    255
  12    마 포 구  1935     585.0  108.0   69.0     70    177    359    372    195
  13     서대문구  2121     565.0  233.0  214.0    114    109    277    415    194
  14    서 초 구  2835    1172.0   91.0  228.0    134    215    352    247    396
  15    성 동 구  2679     665.0  109.0  118.0    101    258    201    933    294
  16    성 북 구  3003     779.0   84.0  304.0    241    279    388    285    643
  17    송 파 구  1586     600.0   99.0   88.0     21    166    100    116    396
  18    양 천 구  2775     772.0  161.0  185.0    169    172    349    137    830
  19     영등포구  2495     132.0  121.0  206.0    217    366    289    371    793
  20    용 산 구  2063    1279.0  152.0  201.0    107    102     89     60     73
  21    은 평 구  2962    1365.0   83.0   99.0    343    180    296    229    367
  22    종 로 구  1471       8.0    7.0  599.0    132    195    148    281    101
  23  중     구  1544      25.0  165.0  114.0     80    245    270    317    328
  24    중 랑 구  1068       NaN    NaN    NaN    770    102    121     66      9
#+END_EXAMPLE
:end:

#+begin_src ipython
  name_split =CCTV_Seoul["기관명"].str.split(" ")
  name_split
#+end_src

#+RESULTS:
:results:
# Out[166]:
#+BEGIN_EXAMPLE
  0          [강, 남, 구]
  1          [강, 동, 구]
  2          [강, 북, 구]
  3          [강, 서, 구]
  4          [관, 악, 구]
  5          [광, 진, 구]
  6          [구, 로, 구]
  7          [금, 천, 구]
  8          [노, 원, 구]
  9          [도, 봉, 구]
  10            [동대문구]
  11         [동, 작, 구]
  12         [마, 포, 구]
  13            [서대문구]
  14         [서, 초, 구]
  15         [성, 동, 구]
  16         [성, 북, 구]
  17         [송, 파, 구]
  18         [양, 천, 구]
  19            [영등포구]
  20         [용, 산, 구]
  21         [은, 평, 구]
  22         [종, 로, 구]
  23    [중, , , , , 구]
  24         [중, 랑, 구]
  Name: 기관명, dtype: object
#+END_EXAMPLE
:end:
이렇게 해야하는 거 아닌가
#+begin_src ipython
  CCTV_Seoul['기관명'] = name_split.str.join(sep='')
  CCTV_Seoul.tail(20)
#+end_src

#+RESULTS:
:results:
# Out[167]:
#+BEGIN_EXAMPLE
  기관명    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년
  5    광진구  1581     470.0   42.0   83.0     87     64     21    468    346
  6    구로구  3227     852.0  219.0  349.0    187    268    326    540    486
  7    금천구  1634      27.0   17.0  242.0    101    382    136    199    530
  8    노원구  1906     481.0  117.0  203.0     80    461    298    110    156
  9    도봉구   858     197.0   66.0    8.0    185     59    155    117     71
  10  동대문구  2003       NaN    NaN    NaN   1326    111    233    136    197
  11   동작구  1780     238.0   93.0   29.0    503    130    254    278    255
  12   마포구  1935     585.0  108.0   69.0     70    177    359    372    195
  13  서대문구  2121     565.0  233.0  214.0    114    109    277    415    194
  14   서초구  2835    1172.0   91.0  228.0    134    215    352    247    396
  15   성동구  2679     665.0  109.0  118.0    101    258    201    933    294
  16   성북구  3003     779.0   84.0  304.0    241    279    388    285    643
  17   송파구  1586     600.0   99.0   88.0     21    166    100    116    396
  18   양천구  2775     772.0  161.0  185.0    169    172    349    137    830
  19  영등포구  2495     132.0  121.0  206.0    217    366    289    371    793
  20   용산구  2063    1279.0  152.0  201.0    107    102     89     60     73
  21   은평구  2962    1365.0   83.0   99.0    343    180    296    229    367
  22   종로구  1471       8.0    7.0  599.0    132    195    148    281    101
  23    중구  1544      25.0  165.0  114.0     80    245    270    317    328
  24   중랑구  1068       NaN    NaN    NaN    770    102    121     66      9
#+END_EXAMPLE
:end:

#+begin_src ipython
  CCTV_Seoul.rename(columns={CCTV_Seoul.columns[0]: '구별'}, inplace=True)
  CCTV_Seoul.head()
#+end_src

#+RESULTS:
:results:
# Out[168]:
#+BEGIN_EXAMPLE
  구별    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년
  0  강남구  5221    1944.0  195.0  316.0    430    546    765    577    448
  1  강동구  1879     303.0  387.0  134.0     59    144    194    273    385
  2  강북구  1265     243.0   88.0  141.0     74    145    254      1    319
  3  강서구  1617     219.0  155.0  118.0    230    187    190    264    254
  4  관악구  3985     430.0   56.0  419.0    487    609    619    694    671
#+END_EXAMPLE
:end:

#+begin_src ipython
  pop_Seoul=pd.read_csv('DataScience/data/report.txt', sep='\t')
  pop_Seoul.head()
#+end_src

#+RESULTS:
:results:
# Out[169]:
#+BEGIN_EXAMPLE
  기간  자치구         세대         인구       인구.1       인구.2       인구.3  \
  0        기간  자치구         세대         합계         합계         합계        한국인
  1        기간  자치구         세대          계         남자         여자          계
  2  2020.2/4   합계  4,384,076  9,985,652  4,859,501  5,126,151  9,720,846
  3  2020.2/4  종로구     74,497    160,520     77,745     82,775    150,383
  4  2020.2/4   중구     63,354    136,030     66,545     69,485    126,092
  
  인구.4       인구.5     인구.6     인구.7     인구.8  세대당인구   65세이상고령자
  0        한국인        한국인    등록외국인    등록외국인    등록외국인  세대당인구   65세이상고령자
  1         남자         여자        계       남자       여자  세대당인구   65세이상고령자
  2  4,732,275  4,988,571  264,806  127,226  137,580   2.22  1,534,957
  3     73,288     77,095   10,137    4,457    5,680   2.02     28,203
  4     61,697     64,395    9,938    4,848    5,090   1.99     24,035
#+END_EXAMPLE
:end:
thousands 는 콤마를 없애겠다는 설정이다.
#+begin_src ipython
pop_Seoul=pd.read_csv('DataScience/data/report.txt', sep='\t', header=2, thousands=',')
pop_Seoul
#+end_src

#+RESULTS:
:results:
# Out[171]:
#+BEGIN_EXAMPLE
  기간   자치구       세대        계       남자       여자      계.1     남자.1  \
  0   2020.2/4    합계  4384076  9985652  4859501  5126151  9720846  4732275
  1   2020.2/4   종로구    74497   160520    77745    82775   150383    73288
  2   2020.2/4    중구    63354   136030    66545    69485   126092    61697
  3   2020.2/4   용산구   111586   245362   119494   125868   229431   110527
  4   2020.2/4   성동구   135937   304851   148554   156297   297397   145258
  5   2020.2/4   광진구   166307   363925   175083   188842   349574   168879
  6   2020.2/4  동대문구   166451   360380   177237   183143   345593   171392
  7   2020.2/4   중랑구   183310   399415   197384   202031   394414   195349
  8   2020.2/4   성북구   195064   452290   217551   234739   441812   213431
  9   2020.2/4   강북구   145559   315395   153389   162006   311773   152028
  10  2020.2/4   도봉구   138966   331744   161724   170020   329560   160855
  11  2020.2/4   노원구   217897   533041   257473   275568   528887   255624
  12  2020.2/4   은평구   210664   483938   232423   251515   479524   230640
  13  2020.2/4  서대문구   143323   324224   153921   170303   312720   149920
  14  2020.2/4   마포구   177544   384957   180659   204298   374390   176664
  15  2020.2/4   양천구   179677   462034   226748   235286   457953   224908
  16  2020.2/4   강서구   265252   593203   286668   306535   586936   283697
  17  2020.2/4   구로구   178367   436707   218051   218656   405075   200098
  18  2020.2/4   금천구   112570   250554   128078   122476   232250   117762
  19  2020.2/4  영등포구   179787   405154   202648   202506   373349   184905
  20  2020.2/4   동작구   183537   406776   196479   210297   395165   191211
  21  2020.2/4   관악구   273715   516318   258740   257578   499740   250829
  22  2020.2/4   서초구   173998   433062   207095   225967   428919   205037
  23  2020.2/4   강남구   233484   546158   261187   284971   541233   258753
  24  2020.2/4   송파구   280135   678067   327383   350684   671512   324317
  25  2020.2/4   강동구   193095   461547   227242   234305   457164   225206
  
  여자.1     계.2    남자.2    여자.2  세대당인구  65세이상고령자
  0   4988571  264806  127226  137580   2.22   1534957
  1     77095   10137    4457    5680   2.02     28203
  2     64395    9938    4848    5090   1.99     24035
  3    118904   15931    8967    6964   2.06     39650
  4    152139    7454    3296    4158   2.19     45005
  5    180695   14351    6204    8147   2.10     49457
  6    174201   14787    5845    8942   2.08     60817
  7    199065    5001    2035    2966   2.15     67637
  8    228381   10478    4120    6358   2.26     72822
  9    159745    3622    1361    2261   2.14     62338
  10   168705    2184     869    1315   2.37     60784
  11   273263    4154    1849    2305   2.43     83636
  12   248884    4414    1783    2631   2.28     83272
  13   162800   11504    4001    7503   2.18     53468
  14   197726   10567    3995    6572   2.11     53694
  15   233045    4081    1840    2241   2.55     63824
  16   303239    6267    2971    3296   2.21     87032
  17   204977   31632   17953   13679   2.27     68280
  18   114488   18304   10316    7988   2.06     38950
  19   188444   31805   17743   14062   2.08     60071
  20   203954   11611    5268    6343   2.15     64039
  21   248911   16578    7911    8667   1.83     77341
  22   223882    4143    2058    2085   2.47     59063
  23   282480    4925    2434    2491   2.32     73097
  24   347195    6555    3066    3489   2.40     90700
  25   231958    4383    2036    2347   2.37     67742
#+END_EXAMPLE
:end:

#+begin_src ipython
pop_Seoul=pop_Seoul[['자치구','계', '계.1', '계.2', '65세이상고령자']]
pop_Seoul
#+end_src

#+RESULTS:
:results:
# Out[172]:
#+BEGIN_EXAMPLE
  자치구        계      계.1     계.2  65세이상고령자
  0     합계  9985652  9720846  264806   1534957
  1    종로구   160520   150383   10137     28203
  2     중구   136030   126092    9938     24035
  3    용산구   245362   229431   15931     39650
  4    성동구   304851   297397    7454     45005
  5    광진구   363925   349574   14351     49457
  6   동대문구   360380   345593   14787     60817
  7    중랑구   399415   394414    5001     67637
  8    성북구   452290   441812   10478     72822
  9    강북구   315395   311773    3622     62338
  10   도봉구   331744   329560    2184     60784
  11   노원구   533041   528887    4154     83636
  12   은평구   483938   479524    4414     83272
  13  서대문구   324224   312720   11504     53468
  14   마포구   384957   374390   10567     53694
  15   양천구   462034   457953    4081     63824
  16   강서구   593203   586936    6267     87032
  17   구로구   436707   405075   31632     68280
  18   금천구   250554   232250   18304     38950
  19  영등포구   405154   373349   31805     60071
  20   동작구   406776   395165   11611     64039
  21   관악구   516318   499740   16578     77341
  22   서초구   433062   428919    4143     59063
  23   강남구   546158   541233    4925     73097
  24   송파구   678067   671512    6555     90700
  25   강동구   461547   457164    4383     67742
#+END_EXAMPLE
:end:
#+begin_src ipython
pop_Seoul.drop([0], inplace=True)
pop_Seoul.head()
#+end_src

#+RESULTS:
:results:
# Out[173]:
#+BEGIN_EXAMPLE
  자치구       계     계.1    계.2  65세이상고령자
  1  종로구  160520  150383  10137     28203
  2   중구  136030  126092   9938     24035
  3  용산구  245362  229431  15931     39650
  4  성동구  304851  297397   7454     45005
  5  광진구  363925  349574  14351     49457
#+END_EXAMPLE
:end:

#+begin_src ipython
pop_Seoul.rename(columns={pop_Seoul.columns[0]:'구별',
pop_Seoul.columns[1]:'인구수',pop_Seoul.columns[2]:'한국인',pop_Seoul.columns[3]:'외국인',pop_Seoul.columns[4]:'고령자'}, inplace=True)

pop_Seoul.head(30)
#+end_src

#+RESULTS:
:results:
# Out[174]:
#+BEGIN_EXAMPLE
  구별     인구수     한국인    외국인    고령자
  1    종로구  160520  150383  10137  28203
  2     중구  136030  126092   9938  24035
  3    용산구  245362  229431  15931  39650
  4    성동구  304851  297397   7454  45005
  5    광진구  363925  349574  14351  49457
  6   동대문구  360380  345593  14787  60817
  7    중랑구  399415  394414   5001  67637
  8    성북구  452290  441812  10478  72822
  9    강북구  315395  311773   3622  62338
  10   도봉구  331744  329560   2184  60784
  11   노원구  533041  528887   4154  83636
  12   은평구  483938  479524   4414  83272
  13  서대문구  324224  312720  11504  53468
  14   마포구  384957  374390  10567  53694
  15   양천구  462034  457953   4081  63824
  16   강서구  593203  586936   6267  87032
  17   구로구  436707  405075  31632  68280
  18   금천구  250554  232250  18304  38950
  19  영등포구  405154  373349  31805  60071
  20   동작구  406776  395165  11611  64039
  21   관악구  516318  499740  16578  77341
  22   서초구  433062  428919   4143  59063
  23   강남구  546158  541233   4925  73097
  24   송파구  678067  671512   6555  90700
  25   강동구  461547  457164   4383  67742
#+END_EXAMPLE
:end:
#+begin_src ipython
  CCTV_Seoul.sort_values(by='소계', ascending=False).head(5)
#+end_src

#+RESULTS:
:results:
# Out[175]:
#+BEGIN_EXAMPLE
  구별    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년
  0   강남구  5221    1944.0  195.0  316.0    430    546    765    577    448
  4   관악구  3985     430.0   56.0  419.0    487    609    619    694    671
  6   구로구  3227     852.0  219.0  349.0    187    268    326    540    486
  16  성북구  3003     779.0   84.0  304.0    241    279    388    285    643
  21  은평구  2962    1365.0   83.0   99.0    343    180    296    229    367
#+END_EXAMPLE
:end:

#+begin_src ipython
CCTV_Seoul['최근증가율']=(CCTV_Seoul['2018년']+CCTV_Seoul['2017년']+CCTV_Seoul['2016년']+CCTV_Seoul['2015년']+CCTV_Seoul['2014년'])/(CCTV_Seoul['2013년']+CCTV_Seoul['2012년']+CCTV_Seoul['2011년 이전'])*100
CCTV_Seoul['최근증가율']
#+end_src

#+RESULTS:
:results:
# Out[176]:
#+BEGIN_EXAMPLE
  0     112.668024
  1     128.033981
  2     168.008475
  3     228.658537
  4     340.331492
  5     165.714286
  6     127.253521
  7     471.328671
  8     137.952559
  9     216.605166
  10           NaN
  11    394.444444
  12    153.937008
  13    109.584980
  14     90.140845
  15    200.336323
  16    157.326478
  17    101.524778
  18    148.211091
  19    443.572985
  20     26.409314
  21     91.467356
  22    139.576547
  23    407.894737
  24           NaN
  Name: 최근증가율, dtype: float64
#+END_EXAMPLE
:end:

#+begin_src ipython
CCTV_Seoul.sort_values(by='최근증가율', ascending=False).head(5)
#+end_src

#+RESULTS:
:results:
# Out[177]:
#+BEGIN_EXAMPLE
  구별    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년  \
  7    금천구  1634      27.0   17.0  242.0    101    382    136    199    530
  19  영등포구  2495     132.0  121.0  206.0    217    366    289    371    793
  23    중구  1544      25.0  165.0  114.0     80    245    270    317    328
  11   동작구  1780     238.0   93.0   29.0    503    130    254    278    255
  4    관악구  3985     430.0   56.0  419.0    487    609    619    694    671
  
  최근증가율
  7   471.328671
  19  443.572985
  23  407.894737
  11  394.444444
  4   340.331492
#+END_EXAMPLE
:end:

#+begin_src ipython
  pop_Seoul['구별'].unique()
#+end_src

#+RESULTS:
:results:
# Out[178]:
#+BEGIN_EXAMPLE
  array(['종로구', '중구', '용산구', '성동구', '광진구', '동대문구', '중랑구', '성북구', '강북구',
  '도봉구', '노원구', '은평구', '서대문구', '마포구', '양천구', '강서구', '구로구', '금천구',
  '영등포구', '동작구', '관악구', '서초구', '강남구', '송파구', '강동구'], dtype=object)
#+END_EXAMPLE
:end:

#+begin_src ipython
  CCTV_Seoul['구별'].unique()
#+end_src

#+RESULTS:
:results:
# Out[179]:
#+BEGIN_EXAMPLE
  array(['강남구', '강동구', '강북구', '강서구', '관악구', '광진구', '구로구', '금천구', '노원구',
  '도봉구', '동대문구', '동작구', '마포구', '서대문구', '서초구', '성동구', '성북구', '송파구',
  '양천구', '영등포구', '용산구', '은평구', '종로구', '중구', '중랑구'], dtype=object)
#+END_EXAMPLE
:end:

#+begin_src ipython
  CCTV_Seoul[CCTV_Seoul['구별'].isnull()]
#+end_src

#+RESULTS:
:results:
# Out[180]:
#+BEGIN_EXAMPLE
  Empty DataFrame
  Columns: [구별, 소계, 2011년 이전, 2012년, 2013년, 2014년, 2015년, 2016년, 2017년, 2018년, 최근증가율]
  Index: []
#+END_EXAMPLE
:end:

#+begin_src ipython
  CCTV_Seoul
#+end_src

#+RESULTS:
:results:
# Out[181]:
#+BEGIN_EXAMPLE
  구별    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년  \
  0    강남구  5221    1944.0  195.0  316.0    430    546    765    577    448
  1    강동구  1879     303.0  387.0  134.0     59    144    194    273    385
  2    강북구  1265     243.0   88.0  141.0     74    145    254      1    319
  3    강서구  1617     219.0  155.0  118.0    230    187    190    264    254
  4    관악구  3985     430.0   56.0  419.0    487    609    619    694    671
  5    광진구  1581     470.0   42.0   83.0     87     64     21    468    346
  6    구로구  3227     852.0  219.0  349.0    187    268    326    540    486
  7    금천구  1634      27.0   17.0  242.0    101    382    136    199    530
  8    노원구  1906     481.0  117.0  203.0     80    461    298    110    156
  9    도봉구   858     197.0   66.0    8.0    185     59    155    117     71
  10  동대문구  2003       NaN    NaN    NaN   1326    111    233    136    197
  11   동작구  1780     238.0   93.0   29.0    503    130    254    278    255
  12   마포구  1935     585.0  108.0   69.0     70    177    359    372    195
  13  서대문구  2121     565.0  233.0  214.0    114    109    277    415    194
  14   서초구  2835    1172.0   91.0  228.0    134    215    352    247    396
  15   성동구  2679     665.0  109.0  118.0    101    258    201    933    294
  16   성북구  3003     779.0   84.0  304.0    241    279    388    285    643
  17   송파구  1586     600.0   99.0   88.0     21    166    100    116    396
  18   양천구  2775     772.0  161.0  185.0    169    172    349    137    830
  19  영등포구  2495     132.0  121.0  206.0    217    366    289    371    793
  20   용산구  2063    1279.0  152.0  201.0    107    102     89     60     73
  21   은평구  2962    1365.0   83.0   99.0    343    180    296    229    367
  22   종로구  1471       8.0    7.0  599.0    132    195    148    281    101
  23    중구  1544      25.0  165.0  114.0     80    245    270    317    328
  24   중랑구  1068       NaN    NaN    NaN    770    102    121     66      9
  
  최근증가율
  0   112.668024
  1   128.033981
  2   168.008475
  3   228.658537
  4   340.331492
  5   165.714286
  6   127.253521
  7   471.328671
  8   137.952559
  9   216.605166
  10         NaN
  11  394.444444
  12  153.937008
  13  109.584980
  14   90.140845
  15  200.336323
  16  157.326478
  17  101.524778
  18  148.211091
  19  443.572985
  20   26.409314
  21   91.467356
  22  139.576547
  23  407.894737
  24         NaN
#+END_EXAMPLE
:end:


#+begin_src ipython
  CCTV_Seoul.drop([10], inplace=True)
#+end_src

#+RESULTS:
:results:
# Out[187]:
:end:


#+begin_src ipython
  CCTV_Seoul[CCTV_Seoul['구별'].isnull()]
#+end_src

#+RESULTS:
:results:
# Out[188]:
#+BEGIN_EXAMPLE
  Empty DataFrame
  Columns: [구별, 소계, 2011년 이전, 2012년, 2013년, 2014년, 2015년, 2016년, 2017년, 2018년, 최근증가율]
  Index: []
#+END_EXAMPLE
:end:

#+begin_src ipython
  CCTV_Seoul
#+end_src

#+RESULTS:
:results:
# Out[189]:
#+BEGIN_EXAMPLE
  구별    소계  2011년 이전  2012년  2013년  2014년  2015년  2016년  2017년  2018년  \
  0    강남구  5221    1944.0  195.0  316.0    430    546    765    577    448
  1    강동구  1879     303.0  387.0  134.0     59    144    194    273    385
  2    강북구  1265     243.0   88.0  141.0     74    145    254      1    319
  3    강서구  1617     219.0  155.0  118.0    230    187    190    264    254
  4    관악구  3985     430.0   56.0  419.0    487    609    619    694    671
  5    광진구  1581     470.0   42.0   83.0     87     64     21    468    346
  6    구로구  3227     852.0  219.0  349.0    187    268    326    540    486
  7    금천구  1634      27.0   17.0  242.0    101    382    136    199    530
  8    노원구  1906     481.0  117.0  203.0     80    461    298    110    156
  9    도봉구   858     197.0   66.0    8.0    185     59    155    117     71
  11   동작구  1780     238.0   93.0   29.0    503    130    254    278    255
  12   마포구  1935     585.0  108.0   69.0     70    177    359    372    195
  13  서대문구  2121     565.0  233.0  214.0    114    109    277    415    194
  14   서초구  2835    1172.0   91.0  228.0    134    215    352    247    396
  15   성동구  2679     665.0  109.0  118.0    101    258    201    933    294
  16   성북구  3003     779.0   84.0  304.0    241    279    388    285    643
  17   송파구  1586     600.0   99.0   88.0     21    166    100    116    396
  18   양천구  2775     772.0  161.0  185.0    169    172    349    137    830
  19  영등포구  2495     132.0  121.0  206.0    217    366    289    371    793
  20   용산구  2063    1279.0  152.0  201.0    107    102     89     60     73
  21   은평구  2962    1365.0   83.0   99.0    343    180    296    229    367
  22   종로구  1471       8.0    7.0  599.0    132    195    148    281    101
  23    중구  1544      25.0  165.0  114.0     80    245    270    317    328
  24   중랑구  1068       NaN    NaN    NaN    770    102    121     66      9
  
  최근증가율
  0   112.668024
  1   128.033981
  2   168.008475
  3   228.658537
  4   340.331492
  5   165.714286
  6   127.253521
  7   471.328671
  8   137.952559
  9   216.605166
  11  394.444444
  12  153.937008
  13  109.584980
  14   90.140845
  15  200.336323
  16  157.326478
  17  101.524778
  18  148.211091
  19  443.572985
  20   26.409314
  21   91.467356
  22  139.576547
  23  407.894737
  24         NaN
#+END_EXAMPLE
:end:
#+begin_src ipython
  CCTV_Seoul.drop([24], inplace=True)
#+end_src

#+RESULTS:
:results:
# Out[190]:
:end:

#+begin_src ipython
  CCTV_Seoul[CCTV_Seoul['구별'].isnull()]
#+end_src

#+RESULTS:
:results:
# Out[191]:
#+BEGIN_EXAMPLE
  Empty DataFrame
  Columns: [구별, 소계, 2011년 이전, 2012년, 2013년, 2014년, 2015년, 2016년, 2017년, 2018년, 최근증가율]
  Index: []
#+END_EXAMPLE
:end:

#+begin_src ipython
  pop_Seoul
#+end_src

#+RESULTS:
:results:
# Out[192]:
#+BEGIN_EXAMPLE
  구별     인구수     한국인    외국인    고령자
  1    종로구  160520  150383  10137  28203
  2     중구  136030  126092   9938  24035
  3    용산구  245362  229431  15931  39650
  4    성동구  304851  297397   7454  45005
  5    광진구  363925  349574  14351  49457
  6   동대문구  360380  345593  14787  60817
  7    중랑구  399415  394414   5001  67637
  8    성북구  452290  441812  10478  72822
  9    강북구  315395  311773   3622  62338
  10   도봉구  331744  329560   2184  60784
  11   노원구  533041  528887   4154  83636
  12   은평구  483938  479524   4414  83272
  13  서대문구  324224  312720  11504  53468
  14   마포구  384957  374390  10567  53694
  15   양천구  462034  457953   4081  63824
  16   강서구  593203  586936   6267  87032
  17   구로구  436707  405075  31632  68280
  18   금천구  250554  232250  18304  38950
  19  영등포구  405154  373349  31805  60071
  20   동작구  406776  395165  11611  64039
  21   관악구  516318  499740  16578  77341
  22   서초구  433062  428919   4143  59063
  23   강남구  546158  541233   4925  73097
  24   송파구  678067  671512   6555  90700
  25   강동구  461547  457164   4383  67742
#+END_EXAMPLE
:end:

#+begin_src ipython
  pop_Seoul['외국인비율']=pop_Seoul['외국인']/pop_Seoul['인구수']*100
  pop_Seoul['고령자비율']=pop_Seoul['고령자']/pop_Seoul['인구수']*100
  pop_Seoul.head()
#+end_src

#+RESULTS:
:results:
# Out[193]:
#+BEGIN_EXAMPLE
  구별     인구수     한국인    외국인    고령자     외국인비율      고령자비율
  1  종로구  160520  150383  10137  28203  6.315101  17.569773
  2   중구  136030  126092   9938  24035  7.305741  17.668897
  3  용산구  245362  229431  15931  39650  6.492855  16.159797
  4  성동구  304851  297397   7454  45005  2.445129  14.762950
  5  광진구  363925  349574  14351  49457  3.943395  13.589888
#+END_EXAMPLE
:end:

#+begin_src ipython
  pop_Seoul.sort_values(['고령자비율'], ascending=False).head(10)
#+end_src

#+RESULTS:
:results:
# Out[194]:
#+BEGIN_EXAMPLE
  구별     인구수     한국인    외국인    고령자     외국인비율      고령자비율
  9    강북구  315395  311773   3622  62338  1.148401  19.765057
  10   도봉구  331744  329560   2184  60784  0.658339  18.322562
  2     중구  136030  126092   9938  24035  7.305741  17.668897
  1    종로구  160520  150383  10137  28203  6.315101  17.569773
  12   은평구  483938  479524   4414  83272  0.912100  17.207163
  7    중랑구  399415  394414   5001  67637  1.252081  16.934016
  6   동대문구  360380  345593  14787  60817  4.103169  16.875798
  13  서대문구  324224  312720  11504  53468  3.548164  16.491068
  3    용산구  245362  229431  15931  39650  6.492855  16.159797
  8    성북구  452290  441812  10478  72822  2.316655  16.100732
#+END_EXAMPLE
:end:

구 이름중에 NaN 생기지 않게 제대로 출력되게끔 조금 수정했다.
#+begin_src ipython
CCTV_Seoul
pop_Seoul.sort_values(['고령자'], ascending=False).head(10)
#+end_src

#+RESULTS:
:results:
# Out[171]:
#+BEGIN_EXAMPLE
  구별     인구수     한국인    외국인    고령자     외국인비율      고령자비율
  24  송파구  678067  671512   6555  90700  0.966719  13.376259
  16  강서구  593203  586936   6267  87032  1.056468  14.671537
  11  노원구  533041  528887   4154  83636  0.779302  15.690350
  12  은평구  483938  479524   4414  83272  0.912100  17.207163
  21  관악구  516318  499740  16578  77341  3.210812  14.979334
  23  강남구  546158  541233   4925  73097  0.901754  13.383856
  8   성북구  452290  441812  10478  72822  2.316655  16.100732
  17  구로구  436707  405075  31632  68280  7.243300  15.635197
  25  강동구  461547  457164   4383  67742  0.949632  14.677162
  7   중랑구  399415  394414   5001  67637  1.252081  16.934016
#+END_EXAMPLE
:end:
