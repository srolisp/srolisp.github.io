#    -*- mode: org -*-


Archived entries from file /Users/sroh/pg/2020/python/uiap/lecture-note/ai-lecture-lsk-200922-200917.org


* COMMENT Logistic Regression
  :PROPERTIES:
  :ARCHIVE_TIME: 2020-09-22 Tue 16:05
  :ARCHIVE_FILE: ~/pg/2020/python/uiap/lecture-note/ai-lecture-lsk-200922-200917.org
  :ARCHIVE_CATEGORY: ai-lecture-lsk-200922-200917
  :END:
$a$, $b$, .. 파라메터에 의해 $x$ 에 대해 $y$ 값이 종속적인 경우는 Linear Regression 으로 추정하면 되지만, 
중간 범주가 없는 0, 1의 값으로 y값을 표현하고 싶다면 어떻게 해야할까? 에 대한 해답으로 제안된게 Logistic Regression 이다.

이 Logistic Regression 에 쓰이는 함수로 로지스틱 함수인 sigmoid 함수가 있는데,

\begin{equation*}
  y = \frac{1}{1 + e^{-x}}
\end{equation*}

#+begin_src ipython :results output
import matplotlib.pyplot as plt
import numpy as np

x = np.linspace(-10,10,100)
print(x)


#+end_src

#+RESULTS:
#+begin_example
[-10.          -9.7979798   -9.5959596   -9.39393939  -9.19191919
  -8.98989899  -8.78787879  -8.58585859  -8.38383838  -8.18181818
  -7.97979798  -7.77777778  -7.57575758  -7.37373737  -7.17171717
  -6.96969697  -6.76767677  -6.56565657  -6.36363636  -6.16161616
  -5.95959596  -5.75757576  -5.55555556  -5.35353535  -5.15151515
  -4.94949495  -4.74747475  -4.54545455  -4.34343434  -4.14141414
  -3.93939394  -3.73737374  -3.53535354  -3.33333333  -3.13131313
  -2.92929293  -2.72727273  -2.52525253  -2.32323232  -2.12121212
  -1.91919192  -1.71717172  -1.51515152  -1.31313131  -1.11111111
  -0.90909091  -0.70707071  -0.50505051  -0.3030303   -0.1010101
   0.1010101    0.3030303    0.50505051   0.70707071   0.90909091
   1.11111111   1.31313131   1.51515152   1.71717172   1.91919192
   2.12121212   2.32323232   2.52525253   2.72727273   2.92929293
   3.13131313   3.33333333   3.53535354   3.73737374   3.93939394
   4.14141414   4.34343434   4.54545455   4.74747475   4.94949495
   5.15151515   5.35353535   5.55555556   5.75757576   5.95959596
   6.16161616   6.36363636   6.56565657   6.76767677   6.96969697
   7.17171717   7.37373737   7.57575758   7.77777778   7.97979798
   8.18181818   8.38383838   8.58585859   8.78787879   8.98989899
   9.19191919   9.39393939   9.5959596    9.7979798   10.        ]
#+end_example


#+begin_src ipython :results output
  import math
  def sigmoid(x):
    return (1 / (1 + math.exp(-1 * x)))

  plt.scatter(x, [sigmoid(x_i) for x_i in x])
  plt.show()
#+end_src

#+RESULTS:
: 2.0611536181902037e-09
