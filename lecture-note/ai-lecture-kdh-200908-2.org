#+title: 머신러닝용 학습용 데이터셋 예제 연습
#+subtitle: 4 weeks by kdh
#+date: <2020-09-08 Tue 18:00>
#+tags: python, bash, elisp, lisp, zoom
#+author: srolisp

* Iris
아이리스는 3가지 종류가 있는데 4가지 속성값을 이용해서 이를 구분해보는 예제 (클래스로 분류를 하게 하는 예제)
 :PROPERTIES:
 :header-args:bash: :results verbatim
 :header-args:elisp: :exports both
 :header-args:ipython: :session iris :exports both
 :END:
** 사이킷런 데이터셋에서 아이리스 데이터셋을 임포트한다.
#+begin_src ipython :tangle "test2.py"
  from sklearn.datasets import load_iris
#+end_src

#+RESULTS:
: # Out[3]:

** 데이터프레임을 이용하기 위해 pandas를 임포트한다.
#+begin_src ipython :tangle "test2.py"
import pandas as pd
#+end_src

#+RESULTS:
: # Out[4]:

** 아이리스 데이터셋을 로드하여 iris에 담는다.
#+begin_src ipython :results output :tangle "test2.py"
iris = load_iris()
#+end_src

#+RESULTS:

** 아이리스 데이터셋을 출력한다.
#+begin_src ipython :results output :tangle "test2.py"
print(iris)
#+end_src

#+RESULTS:
#+begin_example
{'data': array([[5.1, 3.5, 1.4, 0.2],
       [4.9, 3. , 1.4, 0.2],
       [4.7, 3.2, 1.3, 0.2],
       [4.6, 3.1, 1.5, 0.2],
       [5. , 3.6, 1.4, 0.2],
       [5.4, 3.9, 1.7, 0.4],
       [4.6, 3.4, 1.4, 0.3],
       [5. , 3.4, 1.5, 0.2],
       [4.4, 2.9, 1.4, 0.2],
       [4.9, 3.1, 1.5, 0.1],
       [5.4, 3.7, 1.5, 0.2],
       [4.8, 3.4, 1.6, 0.2],
       [4.8, 3. , 1.4, 0.1],
       [4.3, 3. , 1.1, 0.1],
       [5.8, 4. , 1.2, 0.2],
       [5.7, 4.4, 1.5, 0.4],
       [5.4, 3.9, 1.3, 0.4],
       [5.1, 3.5, 1.4, 0.3],
       [5.7, 3.8, 1.7, 0.3],
       [5.1, 3.8, 1.5, 0.3],
       [5.4, 3.4, 1.7, 0.2],
       [5.1, 3.7, 1.5, 0.4],
       [4.6, 3.6, 1. , 0.2],
       [5.1, 3.3, 1.7, 0.5],
       [4.8, 3.4, 1.9, 0.2],
       [5. , 3. , 1.6, 0.2],
       [5. , 3.4, 1.6, 0.4],
       [5.2, 3.5, 1.5, 0.2],
       [5.2, 3.4, 1.4, 0.2],
       [4.7, 3.2, 1.6, 0.2],
       [4.8, 3.1, 1.6, 0.2],
       [5.4, 3.4, 1.5, 0.4],
       [5.2, 4.1, 1.5, 0.1],
       [5.5, 4.2, 1.4, 0.2],
       [4.9, 3.1, 1.5, 0.2],
       [5. , 3.2, 1.2, 0.2],
       [5.5, 3.5, 1.3, 0.2],
       [4.9, 3.6, 1.4, 0.1],
       [4.4, 3. , 1.3, 0.2],
       [5.1, 3.4, 1.5, 0.2],
       [5. , 3.5, 1.3, 0.3],
       [4.5, 2.3, 1.3, 0.3],
       [4.4, 3.2, 1.3, 0.2],
       [5. , 3.5, 1.6, 0.6],
       [5.1, 3.8, 1.9, 0.4],
       [4.8, 3. , 1.4, 0.3],
       [5.1, 3.8, 1.6, 0.2],
       [4.6, 3.2, 1.4, 0.2],
       [5.3, 3.7, 1.5, 0.2],
       [5. , 3.3, 1.4, 0.2],
       [7. , 3.2, 4.7, 1.4],
       [6.4, 3.2, 4.5, 1.5],
       [6.9, 3.1, 4.9, 1.5],
       [5.5, 2.3, 4. , 1.3],
       [6.5, 2.8, 4.6, 1.5],
       [5.7, 2.8, 4.5, 1.3],
       [6.3, 3.3, 4.7, 1.6],
       [4.9, 2.4, 3.3, 1. ],
       [6.6, 2.9, 4.6, 1.3],
       [5.2, 2.7, 3.9, 1.4],
       [5. , 2. , 3.5, 1. ],
       [5.9, 3. , 4.2, 1.5],
       [6. , 2.2, 4. , 1. ],
       [6.1, 2.9, 4.7, 1.4],
       [5.6, 2.9, 3.6, 1.3],
       [6.7, 3.1, 4.4, 1.4],
       [5.6, 3. , 4.5, 1.5],
       [5.8, 2.7, 4.1, 1. ],
       [6.2, 2.2, 4.5, 1.5],
       [5.6, 2.5, 3.9, 1.1],
       [5.9, 3.2, 4.8, 1.8],
       [6.1, 2.8, 4. , 1.3],
       [6.3, 2.5, 4.9, 1.5],
       [6.1, 2.8, 4.7, 1.2],
       [6.4, 2.9, 4.3, 1.3],
       [6.6, 3. , 4.4, 1.4],
       [6.8, 2.8, 4.8, 1.4],
       [6.7, 3. , 5. , 1.7],
       [6. , 2.9, 4.5, 1.5],
       [5.7, 2.6, 3.5, 1. ],
       [5.5, 2.4, 3.8, 1.1],
       [5.5, 2.4, 3.7, 1. ],
       [5.8, 2.7, 3.9, 1.2],
       [6. , 2.7, 5.1, 1.6],
       [5.4, 3. , 4.5, 1.5],
       [6. , 3.4, 4.5, 1.6],
       [6.7, 3.1, 4.7, 1.5],
       [6.3, 2.3, 4.4, 1.3],
       [5.6, 3. , 4.1, 1.3],
       [5.5, 2.5, 4. , 1.3],
       [5.5, 2.6, 4.4, 1.2],
       [6.1, 3. , 4.6, 1.4],
       [5.8, 2.6, 4. , 1.2],
       [5. , 2.3, 3.3, 1. ],
       [5.6, 2.7, 4.2, 1.3],
       [5.7, 3. , 4.2, 1.2],
       [5.7, 2.9, 4.2, 1.3],
       [6.2, 2.9, 4.3, 1.3],
       [5.1, 2.5, 3. , 1.1],
       [5.7, 2.8, 4.1, 1.3],
       [6.3, 3.3, 6. , 2.5],
       [5.8, 2.7, 5.1, 1.9],
       [7.1, 3. , 5.9, 2.1],
       [6.3, 2.9, 5.6, 1.8],
       [6.5, 3. , 5.8, 2.2],
       [7.6, 3. , 6.6, 2.1],
       [4.9, 2.5, 4.5, 1.7],
       [7.3, 2.9, 6.3, 1.8],
       [6.7, 2.5, 5.8, 1.8],
       [7.2, 3.6, 6.1, 2.5],
       [6.5, 3.2, 5.1, 2. ],
       [6.4, 2.7, 5.3, 1.9],
       [6.8, 3. , 5.5, 2.1],
       [5.7, 2.5, 5. , 2. ],
       [5.8, 2.8, 5.1, 2.4],
       [6.4, 3.2, 5.3, 2.3],
       [6.5, 3. , 5.5, 1.8],
       [7.7, 3.8, 6.7, 2.2],
       [7.7, 2.6, 6.9, 2.3],
       [6. , 2.2, 5. , 1.5],
       [6.9, 3.2, 5.7, 2.3],
       [5.6, 2.8, 4.9, 2. ],
       [7.7, 2.8, 6.7, 2. ],
       [6.3, 2.7, 4.9, 1.8],
       [6.7, 3.3, 5.7, 2.1],
       [7.2, 3.2, 6. , 1.8],
       [6.2, 2.8, 4.8, 1.8],
       [6.1, 3. , 4.9, 1.8],
       [6.4, 2.8, 5.6, 2.1],
       [7.2, 3. , 5.8, 1.6],
       [7.4, 2.8, 6.1, 1.9],
       [7.9, 3.8, 6.4, 2. ],
       [6.4, 2.8, 5.6, 2.2],
       [6.3, 2.8, 5.1, 1.5],
       [6.1, 2.6, 5.6, 1.4],
       [7.7, 3. , 6.1, 2.3],
       [6.3, 3.4, 5.6, 2.4],
       [6.4, 3.1, 5.5, 1.8],
       [6. , 3. , 4.8, 1.8],
       [6.9, 3.1, 5.4, 2.1],
       [6.7, 3.1, 5.6, 2.4],
       [6.9, 3.1, 5.1, 2.3],
       [5.8, 2.7, 5.1, 1.9],
       [6.8, 3.2, 5.9, 2.3],
       [6.7, 3.3, 5.7, 2.5],
       [6.7, 3. , 5.2, 2.3],
       [6.3, 2.5, 5. , 1.9],
       [6.5, 3. , 5.2, 2. ],
       [6.2, 3.4, 5.4, 2.3],
       [5.9, 3. , 5.1, 1.8]]), 'target': array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
       1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
       2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]), 'frame': None, 'target_names': array(['setosa', 'versicolor', 'virginica'], dtype='<U10'), 'DESCR': '.. _iris_dataset:\n\nIris plants dataset\n--------------------\n\n**Data Set Characteristics:**\n\n    :Number of Instances: 150 (50 in each of three classes)\n    :Number of Attributes: 4 numeric, predictive attributes and the class\n    :Attribute Information:\n        - sepal length in cm\n        - sepal width in cm\n        - petal length in cm\n        - petal width in cm\n        - class:\n                - Iris-Setosa\n                - Iris-Versicolour\n                - Iris-Virginica\n                \n    :Summary Statistics:\n\n    ============== ==== ==== ======= ===== ====================\n                    Min  Max   Mean    SD   Class Correlation\n    ============== ==== ==== ======= ===== ====================\n    sepal length:   4.3  7.9   5.84   0.83    0.7826\n    sepal width:    2.0  4.4   3.05   0.43   -0.4194\n    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)\n    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)\n    ============== ==== ==== ======= ===== ====================\n\n    :Missing Attribute Values: None\n    :Class Distribution: 33.3% for each of 3 classes.\n    :Creator: R.A. Fisher\n    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)\n    :Date: July, 1988\n\nThe famous Iris database, first used by Sir R.A. Fisher. The dataset is taken\nfrom Fisher\'s paper. Note that it\'s the same as in R, but not as in the UCI\nMachine Learning Repository, which has two wrong data points.\n\nThis is perhaps the best known database to be found in the\npattern recognition literature.  Fisher\'s paper is a classic in the field and\nis referenced frequently to this day.  (See Duda & Hart, for example.)  The\ndata set contains 3 classes of 50 instances each, where each class refers to a\ntype of iris plant.  One class is linearly separable from the other 2; the\nlatter are NOT linearly separable from each other.\n\n.. topic:: References\n\n   - Fisher, R.A. "The use of multiple measurements in taxonomic problems"\n     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to\n     Mathematical Statistics" (John Wiley, NY, 1950).\n   - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.\n     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.\n   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System\n     Structure and Classification Rule for Recognition in Partially Exposed\n     Environments".  IEEE Transactions on Pattern Analysis and Machine\n     Intelligence, Vol. PAMI-2, No. 1, 67-71.\n   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions\n     on Information Theory, May 1972, 431-433.\n   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II\n     conceptual clustering system finds 3 classes in the data.\n   - Many, many more ...', 'feature_names': ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)'], 'filename': '/Users/sroh/.pyenv/versions/anaconda3-5.3.1/envs/uiap/lib/python3.7/site-packages/sklearn/datasets/data/iris.csv'}
#+end_example

** 키값들을 출력한다.
#+begin_src ipython :results output :tangle "test2.py"
print(iris.keys())
#+end_src

#+RESULTS:
: dict_keys(['data', 'target', 'frame', 'target_names', 'DESCR', 'feature_names', 'filename'])

** 데이터셋의 설명 내용을 출력한다.
#+begin_src ipython :results output :tangle "test2.py"
print(iris.DESCR)
#+end_src

#+RESULTS:
#+begin_example
.. _iris_dataset:

Iris plants dataset
--------------------

,**Data Set Characteristics:**

    :Number of Instances: 150 (50 in each of three classes)
    :Number of Attributes: 4 numeric, predictive attributes and the class
    :Attribute Information:
        - sepal length in cm
        - sepal width in cm
        - petal length in cm
        - petal width in cm
        - class:
                - Iris-Setosa
                - Iris-Versicolour
                - Iris-Virginica
                
    :Summary Statistics:

    ============== ==== ==== ======= ===== ====================
                    Min  Max   Mean    SD   Class Correlation
    ============== ==== ==== ======= ===== ====================
    sepal length:   4.3  7.9   5.84   0.83    0.7826
    sepal width:    2.0  4.4   3.05   0.43   -0.4194
    petal length:   1.0  6.9   3.76   1.76    0.9490  (high!)
    petal width:    0.1  2.5   1.20   0.76    0.9565  (high!)
    ============== ==== ==== ======= ===== ====================

    :Missing Attribute Values: None
    :Class Distribution: 33.3% for each of 3 classes.
    :Creator: R.A. Fisher
    :Donor: Michael Marshall (MARSHALL%PLU@io.arc.nasa.gov)
    :Date: July, 1988

The famous Iris database, first used by Sir R.A. Fisher. The dataset is taken
from Fisher's paper. Note that it's the same as in R, but not as in the UCI
Machine Learning Repository, which has two wrong data points.

This is perhaps the best known database to be found in the
pattern recognition literature.  Fisher's paper is a classic in the field and
is referenced frequently to this day.  (See Duda & Hart, for example.)  The
data set contains 3 classes of 50 instances each, where each class refers to a
type of iris plant.  One class is linearly separable from the other 2; the
latter are NOT linearly separable from each other.

.. topic:: References

   - Fisher, R.A. "The use of multiple measurements in taxonomic problems"
     Annual Eugenics, 7, Part II, 179-188 (1936); also in "Contributions to
     Mathematical Statistics" (John Wiley, NY, 1950).
   - Duda, R.O., & Hart, P.E. (1973) Pattern Classification and Scene Analysis.
     (Q327.D83) John Wiley & Sons.  ISBN 0-471-22361-1.  See page 218.
   - Dasarathy, B.V. (1980) "Nosing Around the Neighborhood: A New System
     Structure and Classification Rule for Recognition in Partially Exposed
     Environments".  IEEE Transactions on Pattern Analysis and Machine
     Intelligence, Vol. PAMI-2, No. 1, 67-71.
   - Gates, G.W. (1972) "The Reduced Nearest Neighbor Rule".  IEEE Transactions
     on Information Theory, May 1972, 431-433.
   - See also: 1988 MLC Proceedings, 54-64.  Cheeseman et al"s AUTOCLASS II
     conceptual clustering system finds 3 classes in the data.
   - Many, many more ...
#+end_example

** 데이터셋의 특성 이름들을 출력한다.
#+begin_src ipython :results output :tangle "test2.py"
print(iris.feature_names)
#+end_src

#+RESULTS:
: ['sepal length (cm)', 'sepal width (cm)', 'petal length (cm)', 'petal width (cm)']

** 데이터셋의 데이터값을 특성이름을 이용하여 데이터프레임을 만든다.
#+begin_src ipython :results values :tangle "test2.py"
df = pd.DataFrame(iris.data, columns=iris.feature_names)
df
#+end_src

#+RESULTS:
#+begin_example
# Out[10]:
,#+BEGIN_EXAMPLE
  sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)
  0                  5.1               3.5                1.4               0.2
  1                  4.9               3.0                1.4               0.2
  2                  4.7               3.2                1.3               0.2
  3                  4.6               3.1                1.5               0.2
  4                  5.0               3.6                1.4               0.2
  ..                 ...               ...                ...               ...
  145                6.7               3.0                5.2               2.3
  146                6.3               2.5                5.0               1.9
  147                6.5               3.0                5.2               2.0
  148                6.2               3.4                5.4               2.3
  149                5.9               3.0                5.1               1.8
  
  [150 rows x 4 columns]
,#+END_EXAMPLE
#+end_example

** 데이터셋의 타겟값을 데이터프레임에 넣는다.
#+begin_src ipython :results values :tangle "test2.py"
df['target'] = iris.target
df['target']
#+end_src

#+RESULTS:
#+begin_example
# Out[11]:
,#+BEGIN_EXAMPLE
  0      0
  1      0
  2      0
  3      0
  4      0
  ..
  145    2
  146    2
  147    2
  148    2
  149    2
  Name: target, Length: 150, dtype: int64
,#+END_EXAMPLE
#+end_example

** 데이터프레임의 처음 5개를 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
df.head()
#+end_src

#+RESULTS:
#+begin_example
# Out[12]:
,#+BEGIN_EXAMPLE
  sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \
  0                5.1               3.5                1.4               0.2
  1                4.9               3.0                1.4               0.2
  2                4.7               3.2                1.3               0.2
  3                4.6               3.1                1.5               0.2
  4                5.0               3.6                1.4               0.2
  
  target
  0       0
  1       0
  2       0
  3       0
  4       0
,#+END_EXAMPLE
#+end_example

** 데이터프레임의 마지막 5개를 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
df.tail()
#+end_src

#+RESULTS:
#+begin_example
# Out[13]:
,#+BEGIN_EXAMPLE
  sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)  \
  145                6.7               3.0                5.2               2.3
  146                6.3               2.5                5.0               1.9
  147                6.5               3.0                5.2               2.0
  148                6.2               3.4                5.4               2.3
  149                5.9               3.0                5.1               1.8
  
  target
  145       2
  146       2
  147       2
  148       2
  149       2
,#+END_EXAMPLE
#+end_example

** 데이터프레임의 모양을 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
df.shape
#+end_src

#+RESULTS:
: # Out[19]:
: : (150, 5)

** 데이터프레임의 기본통꼐 정보를 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
df.describe()
#+end_src

#+RESULTS:
#+begin_example
# Out[20]:
,#+BEGIN_EXAMPLE
  sepal length (cm)  sepal width (cm)  petal length (cm)  \
  count         150.000000        150.000000         150.000000
  mean            5.843333          3.057333           3.758000
  std             0.828066          0.435866           1.765298
  min             4.300000          2.000000           1.000000
  25%             5.100000          2.800000           1.600000
  50%             5.800000          3.000000           4.350000
  75%             6.400000          3.300000           5.100000
  max             7.900000          4.400000           6.900000
  
  petal width (cm)      target
  count        150.000000  150.000000
  mean           1.199333    1.000000
  std            0.762238    0.819232
  min            0.100000    0.000000
  25%            0.300000    0.000000
  50%            1.300000    1.000000
  75%            1.800000    2.000000
  max            2.500000    2.000000
,#+END_EXAMPLE
#+end_example

** 데이터프레임의 마지막 컬럼값을 카운트하여 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
df.iloc[:,-1].value_counts()
#+end_src

#+RESULTS:
: # Out[22]:
: #+BEGIN_EXAMPLE
:   2    50
:   1    50
:   0    50
:   Name: target, dtype: int64
: #+END_EXAMPLE

** 데이터프레임의 target 컬럼값을 카운트하여 출력한다. 마지막 칼럼이니 같은 값이 나오겠지?
#+begin_src ipython :results values :tangle "test2.py"
df.target.value_counts()
#+end_src

#+RESULTS:
: # Out[23]:
: #+BEGIN_EXAMPLE
:   2    50
:   1    50
:   0    50
:   Name: target, dtype: int64
: #+END_EXAMPLE

** 테이터값을 X_data에 할당한다.
#+begin_src ipython :results values :tangle "test2.py"
X_data = iris.data
#+end_src

#+RESULTS:
: # Out[24]:

** 타겟값을 y_data에 할당한다.
#+begin_src ipython :results values :tangle "test2.py"
y_data = iris.target
#+end_src

#+RESULTS:
: # Out[25]:

** X_data을 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
X_data
#+end_src

#+RESULTS:
#+begin_example
# Out[26]:
,#+BEGIN_EXAMPLE
  array([[5.1, 3.5, 1.4, 0.2],
  [4.9, 3. , 1.4, 0.2],
  [4.7, 3.2, 1.3, 0.2],
  [4.6, 3.1, 1.5, 0.2],
  [5. , 3.6, 1.4, 0.2],
  [5.4, 3.9, 1.7, 0.4],
  [4.6, 3.4, 1.4, 0.3],
  [5. , 3.4, 1.5, 0.2],
  [4.4, 2.9, 1.4, 0.2],
  [4.9, 3.1, 1.5, 0.1],
  [5.4, 3.7, 1.5, 0.2],
  [4.8, 3.4, 1.6, 0.2],
  [4.8, 3. , 1.4, 0.1],
  [4.3, 3. , 1.1, 0.1],
  [5.8, 4. , 1.2, 0.2],
  [5.7, 4.4, 1.5, 0.4],
  [5.4, 3.9, 1.3, 0.4],
  [5.1, 3.5, 1.4, 0.3],
  [5.7, 3.8, 1.7, 0.3],
  [5.1, 3.8, 1.5, 0.3],
  [5.4, 3.4, 1.7, 0.2],
  [5.1, 3.7, 1.5, 0.4],
  [4.6, 3.6, 1. , 0.2],
  [5.1, 3.3, 1.7, 0.5],
  [4.8, 3.4, 1.9, 0.2],
  [5. , 3. , 1.6, 0.2],
  [5. , 3.4, 1.6, 0.4],
  [5.2, 3.5, 1.5, 0.2],
  [5.2, 3.4, 1.4, 0.2],
  [4.7, 3.2, 1.6, 0.2],
  [4.8, 3.1, 1.6, 0.2],
  [5.4, 3.4, 1.5, 0.4],
  [5.2, 4.1, 1.5, 0.1],
  [5.5, 4.2, 1.4, 0.2],
  [4.9, 3.1, 1.5, 0.2],
  [5. , 3.2, 1.2, 0.2],
  [5.5, 3.5, 1.3, 0.2],
  [4.9, 3.6, 1.4, 0.1],
  [4.4, 3. , 1.3, 0.2],
  [5.1, 3.4, 1.5, 0.2],
  [5. , 3.5, 1.3, 0.3],
  [4.5, 2.3, 1.3, 0.3],
  [4.4, 3.2, 1.3, 0.2],
  [5. , 3.5, 1.6, 0.6],
  [5.1, 3.8, 1.9, 0.4],
  [4.8, 3. , 1.4, 0.3],
  [5.1, 3.8, 1.6, 0.2],
  [4.6, 3.2, 1.4, 0.2],
  [5.3, 3.7, 1.5, 0.2],
  [5. , 3.3, 1.4, 0.2],
  [7. , 3.2, 4.7, 1.4],
  [6.4, 3.2, 4.5, 1.5],
  [6.9, 3.1, 4.9, 1.5],
  [5.5, 2.3, 4. , 1.3],
  [6.5, 2.8, 4.6, 1.5],
  [5.7, 2.8, 4.5, 1.3],
  [6.3, 3.3, 4.7, 1.6],
  [4.9, 2.4, 3.3, 1. ],
  [6.6, 2.9, 4.6, 1.3],
  [5.2, 2.7, 3.9, 1.4],
  [5. , 2. , 3.5, 1. ],
  [5.9, 3. , 4.2, 1.5],
  [6. , 2.2, 4. , 1. ],
  [6.1, 2.9, 4.7, 1.4],
  [5.6, 2.9, 3.6, 1.3],
  [6.7, 3.1, 4.4, 1.4],
  [5.6, 3. , 4.5, 1.5],
  [5.8, 2.7, 4.1, 1. ],
  [6.2, 2.2, 4.5, 1.5],
  [5.6, 2.5, 3.9, 1.1],
  [5.9, 3.2, 4.8, 1.8],
  [6.1, 2.8, 4. , 1.3],
  [6.3, 2.5, 4.9, 1.5],
  [6.1, 2.8, 4.7, 1.2],
  [6.4, 2.9, 4.3, 1.3],
  [6.6, 3. , 4.4, 1.4],
  [6.8, 2.8, 4.8, 1.4],
  [6.7, 3. , 5. , 1.7],
  [6. , 2.9, 4.5, 1.5],
  [5.7, 2.6, 3.5, 1. ],
  [5.5, 2.4, 3.8, 1.1],
  [5.5, 2.4, 3.7, 1. ],
  [5.8, 2.7, 3.9, 1.2],
  [6. , 2.7, 5.1, 1.6],
  [5.4, 3. , 4.5, 1.5],
  [6. , 3.4, 4.5, 1.6],
  [6.7, 3.1, 4.7, 1.5],
  [6.3, 2.3, 4.4, 1.3],
  [5.6, 3. , 4.1, 1.3],
  [5.5, 2.5, 4. , 1.3],
  [5.5, 2.6, 4.4, 1.2],
  [6.1, 3. , 4.6, 1.4],
  [5.8, 2.6, 4. , 1.2],
  [5. , 2.3, 3.3, 1. ],
  [5.6, 2.7, 4.2, 1.3],
  [5.7, 3. , 4.2, 1.2],
  [5.7, 2.9, 4.2, 1.3],
  [6.2, 2.9, 4.3, 1.3],
  [5.1, 2.5, 3. , 1.1],
  [5.7, 2.8, 4.1, 1.3],
  [6.3, 3.3, 6. , 2.5],
  [5.8, 2.7, 5.1, 1.9],
  [7.1, 3. , 5.9, 2.1],
  [6.3, 2.9, 5.6, 1.8],
  [6.5, 3. , 5.8, 2.2],
  [7.6, 3. , 6.6, 2.1],
  [4.9, 2.5, 4.5, 1.7],
  [7.3, 2.9, 6.3, 1.8],
  [6.7, 2.5, 5.8, 1.8],
  [7.2, 3.6, 6.1, 2.5],
  [6.5, 3.2, 5.1, 2. ],
  [6.4, 2.7, 5.3, 1.9],
  [6.8, 3. , 5.5, 2.1],
  [5.7, 2.5, 5. , 2. ],
  [5.8, 2.8, 5.1, 2.4],
  [6.4, 3.2, 5.3, 2.3],
  [6.5, 3. , 5.5, 1.8],
  [7.7, 3.8, 6.7, 2.2],
  [7.7, 2.6, 6.9, 2.3],
  [6. , 2.2, 5. , 1.5],
  [6.9, 3.2, 5.7, 2.3],
  [5.6, 2.8, 4.9, 2. ],
  [7.7, 2.8, 6.7, 2. ],
  [6.3, 2.7, 4.9, 1.8],
  [6.7, 3.3, 5.7, 2.1],
  [7.2, 3.2, 6. , 1.8],
  [6.2, 2.8, 4.8, 1.8],
  [6.1, 3. , 4.9, 1.8],
  [6.4, 2.8, 5.6, 2.1],
  [7.2, 3. , 5.8, 1.6],
  [7.4, 2.8, 6.1, 1.9],
  [7.9, 3.8, 6.4, 2. ],
  [6.4, 2.8, 5.6, 2.2],
  [6.3, 2.8, 5.1, 1.5],
  [6.1, 2.6, 5.6, 1.4],
  [7.7, 3. , 6.1, 2.3],
  [6.3, 3.4, 5.6, 2.4],
  [6.4, 3.1, 5.5, 1.8],
  [6. , 3. , 4.8, 1.8],
  [6.9, 3.1, 5.4, 2.1],
  [6.7, 3.1, 5.6, 2.4],
  [6.9, 3.1, 5.1, 2.3],
  [5.8, 2.7, 5.1, 1.9],
  [6.8, 3.2, 5.9, 2.3],
  [6.7, 3.3, 5.7, 2.5],
  [6.7, 3. , 5.2, 2.3],
  [6.3, 2.5, 5. , 1.9],
  [6.5, 3. , 5.2, 2. ],
  [6.2, 3.4, 5.4, 2.3],
  [5.9, 3. , 5.1, 1.8]])
,#+END_EXAMPLE
#+end_example

** y_data을 출력한다.
#+begin_src ipython :results values :tangle "test2.py"
y_data
#+end_src

#+RESULTS:
#+begin_example
# Out[27]:
,#+BEGIN_EXAMPLE
  array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
  0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
  2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2])
,#+END_EXAMPLE
#+end_example
